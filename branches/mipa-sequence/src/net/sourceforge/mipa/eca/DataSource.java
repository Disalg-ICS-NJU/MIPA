/* 
 * MIPA - Middleware Infrastructure for Predicate detection in Asynchronous 
 * environments
 * 
 * Copyright (C) 2009 the original author or authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the term of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package net.sourceforge.mipa.eca;

import java.rmi.Remote;
import java.rmi.RemoteException;

import net.sourceforge.mipa.eca.exception.ConditionNotFoundException;

/**
 * Data source of ECA mechanism.
 * 
 * @author Jianping Yu <jianp.yue@gmail.com>
 * @see Condition
 */
public interface DataSource extends Remote {

    /**
     * attaches condition to an event which specifics by <code>eventName</code>.
     * 
     * @param condition
     *            condition class
     * @param eventName
     *            event name
     * @throws RemoteException
     */
    public void attach(Condition condition, String eventName)
                                                             throws RemoteException;

    /**
     * detaches condition from an event which specifics by
     * <code>eventName</code>.
     * 
     * @param condition
     *            condition class
     * @param eventName
     *            event name
     * @throws RemoteException
     */
    public void detach(Condition condition, String eventName)
                                                             throws RemoteException,
                                                             ConditionNotFoundException;

    /**
     * notify the specific conditions who concern the event whose name is
     * <code>eventName</code>.
     * 
     * @param eventName
     *            event name
     * @param values
     *            event values, NOTICE: can't be null.
     * @throws RemoteException
     */
    public void notifyCondition(String eventName, String[] values)
                                                               throws RemoteException;

    /**
     * called by SensorAgent for updating sensor data.
     * 
     * @param eventName
     *            event name
     * @param values
     *            data generated by sensor, NOTICE: can't be null.
     * @throws RemoteException
     * @see SensorAgent
     */
    public void update(String eventName, String[] values) throws RemoteException;
}
