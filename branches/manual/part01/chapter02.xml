<?xml version="1.0" encoding="UTF-8"?>
<chapter id="mipa.a-simple-example">
  <title>Getting Started</title>

  <para>In this chapter, we will describe how to use the MIPA middleware infrastructure via a 'Hello World!' example.
  </para>
  
  <important>
	<para>MIPA is developed entirely in Java.</para>
	<para>All configuration files are written in XML.</para>
  </important>
  
  <para> To achieve context-awareness based on MIPA, the application simplely needs to take 4 steps:
  </para>
  
  <orderedlist>
	<listitem><para>Specify the context property(in terms of a context 'predicate')it is concerned with </para></listitem>
	<listitem><para>Implement the callback interface</para></listitem>
	<listitem><para>Configure MIPA</para></listitem>
	<listitem><para>Launch the MIPA middleware and the context-aware application</para></listitem>
  </orderedlist>
  
  <sect1 id="mipa.a-simple-example.predicate">
	<title>Specification of a Context Predicate</title>
  
	<para>We provide the <link
	  linkend="mipa.principle.predicate.definition">PDCC framework</link> for users to
	specify their Requirements on Context-awareness (RECA). Here is an example of a predicate delineating an
	application's RECA.
	</para>
  
	<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE predicate SYSTEM "predicate.dtd"&gt;
&lt;predicate type="SCP"&gt;
  &lt;prefix value="def" /&gt;
  &lt;GSE value="conjunction"&gt;
    &lt;CGS value="conjunction"&gt;
      &lt;LP&gt;
	&lt;formula&gt;
	  &lt;atom operator="great-than" name="light" value="500" /&gt;
	&lt;/formula&gt;
      &lt;/LP&gt;
      &lt;LP&gt;
	&lt;formula&gt;
	  &lt;atom operator="not-contain" name="RFID" value="tag_00001" /&gt;
	&lt;/formula&gt;
      &lt;/LP&gt;
    &lt;/CGS&gt;
    &lt;global&gt;g&lt;/global&gt;
  &lt;/GSE&gt;
&lt;/predicate&gt;
</programlisting>
	<para>
	  In this example, the user is interested in contextual events concerning the light and the RFID reader. If
	  <code>light intensity &gt; 500</code> and <code>RFID not-contain tag_00001</code>
	occur simultaneously, the application should be notified.
	</para>
  
	<para>In this chapter, we assume that the context which is specified in
	  the predicate is available for applications. If not, we will discuss this
	  case in <link linkend="mipa.usage.user.sensor">Chapter 3</link>.
	</para>
  </sect1>

  
  <sect1 id="mipa.a-simple-example.application">
	<title>Implementing the Callback Interface</title>
  
	<para>In order to be notified by MIPA, the application should implement the
	  callback interface.</para>
	
	<para>In this example, when the predicate becomes true, the application just
	  prints "Hello World!". Code of the callback interface is shown below.
	</para>
  
	<programlisting>
import net.sourceforge.mipa.application.AbstractApplication;

public class Application extends AbstractApplication {

      public void callback(String value) throws RemoteException {
            System.out.println("Hello World!");
      }
}
</programlisting>
  
  </sect1>

  <sect1 id="mipa.a-simple-example.system-config">
	<title>Configuring MIPA</title>
  
	<para> We should configure the MIPA middleware before it is launched. An example of
	a system configuration file is shown below. In this example, we should
		configure the IP address and port of a naming server which provides the naming service on the
		<code>PD Side</code>.
	</para>
	
	<para>In this example, we choose <code>normal</code> mode of <code>check
	  mode</code>. The mode will be explained in detail in the <link
		linkend="mipa.usage.developer.checkMode">Check Mode</link> Section.
	</para>
  
	<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE config SYSTEM "config.dtd"&gt;
&lt;config&gt;
	&lt;naming&gt;
		&lt;address&gt;127.0.0.1&lt;/address&gt;
		&lt;port&gt;1099&lt;/port&gt;
	&lt;/naming&gt;
	&lt;!-- normal or lattice --&gt;
	&lt;checkmode&gt;normal&lt;/checkmode&gt;
&lt;/config&gt;
</programlisting>
  </sect1>

  <sect1 id="mipa.a-simple-example.start-system">
	<title>Launching MIPA and the context-aware application</title>
  
	<para>Before executing the start-up scripts, we need to creat a simple context-aware application first.
	</para>
	
		<programlisting>
Application app = new Application("predicate.xml");
app.start("config/config.xml");
</programlisting>
	
	<para>Now, let's launch the system.</para>
	
	<para>MIPA consists of two sides: <link linkend="mipa.principle.pd"><code>PD
		  Side</code></link> and <link linkend="mipa.principle.eca"><code>ECA
		  Side</code></link>. In this example, there are only one instance of the predicate checker on the <code>PD
		Side</code> and one instance of the contextual event notifier on the <code>ECA Side</code>.
	</para>
  
	<para>Start-up scripts are located in <code>${MIPA Home}/bin</code>, it supports
	both Linux and Windows operating systems. In this manual, we take Linux as an
	example.
	</para>
  
	<para>The steps of starting <code>PD Side</code>: (Please replace <code>${MIPA
		Home}</code> with the actual path on your system)
	</para>
  
	<orderedlist>
	  <listitem><para><code>$cd ${MIPA Home}/bin/linux</code></para></listitem>
	  <listitem><para><code>$./MIPAInitialize</code></para></listitem>
	</orderedlist>
  
	<para>We can start up the <code>ECA Side</code> on the same computer of the
	  <code>PD Side</code> or on another computer.
	</para>
  
	<para>The steps of launching an <code>ECA Side</code>:</para>
  
	<orderedlist>
	  <listitem><para><code>$cd ${MIPA Home}/bin/linux</code></para></listitem>
	  <listitem><para><code>$./ECAInitialize</code></para></listitem>
	</orderedlist>
  
	<para>In the last step, an application should be started. We provide an example
	whose start-up script is located in the same directory as others.
	</para>
  
	<para>The steps of launching the example:</para>
  
	<orderedlist>
	  <listitem><para><code>$cd ${MIPA Home}/bin/linux</code></para></listitem>
	  <listitem><para><code>$./application 1</code></para></listitem>
	</orderedlist>
  </sect1>
</chapter>